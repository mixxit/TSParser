
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 07 08:16:52 MDT 2008
//----------------------------------------------------

package Example;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 07 08:16:52 MDT 2008
  */
public class TSParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TSParser() {super();}

  /** Constructor which sets the default scanner. */
  public TSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TSParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\006" +
    "\000\002\004\006\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\012\005\005\006\012\007\011\011\006\001" +
    "\002\000\014\002\uffff\005\uffff\006\uffff\007\uffff\011\uffff" +
    "\001\002\000\012\005\005\006\012\007\011\011\006\001" +
    "\002\000\020\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\001\002\000\014\002\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\011\ufffe\001\002\000\014\002\021\005\005" +
    "\006\012\007\011\011\006\001\002\000\012\005\005\006" +
    "\012\007\011\011\006\001\002\000\012\005\005\006\012" +
    "\007\011\011\006\001\002\000\004\004\014\001\002\000" +
    "\012\005\005\006\012\007\011\011\006\001\002\000\020" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\001\002\000\004\010\017\001\002\000\020\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\001" +
    "\002\000\014\002\001\005\001\006\001\007\001\011\001" +
    "\001\002\000\004\002\000\001\002\000\004\004\023\001" +
    "\002\000\012\005\005\006\012\007\011\011\006\001\002" +
    "\000\020\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\002\007\003\003\004\006\001\001\000" +
    "\002\001\001\000\004\004\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\017\004\006\001\001\000" +
    "\004\004\015\001\001\000\004\004\012\001\001\000\002" +
    "\001\001\000\004\004\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\023\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new TSParser(new TSScanner(System.in,sf),sf).parse();
		else new TSParser(new TSScanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TSParser$actions {
  private final TSParser parser;

  /** Constructor */
  CUP$TSParser$actions(TSParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TSParser$do_action(
    int                        CUP$TSParser$act_num,
    java_cup.runtime.lr_parser CUP$TSParser$parser,
    java.util.Stack            CUP$TSParser$stack,
    int                        CUP$TSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TSParser$result;

      /* select the action based on the action number */
      switch (CUP$TSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		 RESULT=e; 
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= TIMES expr SEMI expr 
            {
              Integer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		 RESULT=new Integer(l.intValue() * r.intValue()); 
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= PLUS expr SEMI expr 
            {
              Integer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		 RESULT=new Integer(l.intValue() + r.intValue()); 
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-3)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		 RESULT=n; 
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$TSParser$stack.peek()).value;
		 System.out.println(" = "+e+";"); 
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)).value;
		RESULT = start_val;
              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TSParser$parser.done_parsing();
          return CUP$TSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$TSParser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$TSParser$stack.elementAt(CUP$TSParser$top-1)), ((java_cup.runtime.Symbol)CUP$TSParser$stack.peek()), RESULT);
            }
          return CUP$TSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

